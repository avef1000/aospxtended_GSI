From 5df3ba5249c317168048ab10a1119fca1e127329 Mon Sep 17 00:00:00 2001
From: BoNic <BoNio9527@gmail.com>
Date: Sun, 7 Jan 2024 13:05:41 -0500
Subject: [PATCH] Add tunables for statusbar paddings (2/2)

---
 res/values/attrs.xml                          |   9 +
 res/values-zh-rCN/strings.xml                 |   6 +
 res/values/strings.xml                        |  12 +
 res/xml/misc_derpspace.xml                    |  27 ++
 .../derpspace/fragments/StatusBar.java        | 121 ++++++
 .../preferences/CustomSeekBarPreference.java  | 344 ++++++++++++++++++
 .../derpspace/utils/ResourceUtils.java        |  34 ++
 7 files changed, 553 insertions(+)
 create mode 100644 src/org/derpfest/derpspace/fragments/StatusBar.java
 create mode 100644 src/org/derpfest/derpspace/preferences/CustomSeekBarPreference.java
 create mode 100644 src/org/derpfest/derpspace/utils/ResourceUtils.java

diff --git a/res/values/attrs.xml b/res/values/attrs.xml
index c25dc32..d2f6de2 100644
--- a/res/values/attrs.xml
+++ b/res/values/attrs.xml
@@ -47,4 +47,13 @@
         <attr name="digits" format="integer" />
     </declare-styleable>
 
+    <!-- Base attributes available to CustomSeekBarPreference. -->
+    <declare-styleable name="CustomSeekBarPreference">
+        <attr name="defaultValueText" format="string" />
+        <attr name="interval" format="integer" />
+        <attr name="showSign" format="boolean" />
+        <attr name="units" format="string|reference" />
+        <attr name="continuousUpdates" format="boolean" />
+    </declare-styleable>
+
 </resources>
diff --git a/res/values-zh-rCN/strings.xml b/res/values-zh-rCN/strings.xml
index fd3788f..002b1a7 100644
--- a/res/values-zh-rCN/strings.xml
+++ b/res/values-zh-rCN/strings.xml
@@ -523,4 +523,10 @@
     <!-- Netflix Spoof -->
     <string name="netflix_spoof_title">Netflix 机型伪装</string>
     <string name="netflix_spoof_summary">对 Netflix 伪装您的设备为其他型号</string>
+
+    <!-- Status bar padding -->
+    <string name="statusbar_padding">状态栏填充</string>
+    <string name="statusbar_top_padding">顶部</string>
+    <string name="statusbar_left_padding">左边</string>
+    <string name="statusbar_right_padding">右边</string>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index fae5a66..607d3cc 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -538,4 +538,16 @@
     <!-- Netflix Spoof -->
     <string name="netflix_spoof_title">Netflix spoof</string>
     <string name="netflix_spoof_summary">Spoof your device as different model for Netflix</string>
+
+    <!-- Custom seekbar -->
+    <string name="custom_seekbar_value">Value: <xliff:g id="v">%s</xliff:g></string>
+    <string name="custom_seekbar_default_value">by default</string>
+    <string name="custom_seekbar_default_value_to_set">Default value: <xliff:g id="v">%s</xliff:g>\nLong tap to set</string>
+    <string name="custom_seekbar_default_value_is_set">Default value is set</string>
+
+    <!-- Status bar padding -->
+    <string name="statusbar_padding">Status bar padding</string>
+    <string name="statusbar_top_padding">Top padding</string>
+    <string name="statusbar_left_padding">Left padding</string>
+    <string name="statusbar_right_padding">Right padding</string>
 </resources>
diff --git a/res/xml/misc_derpspace.xml b/res/xml/misc_derpspace.xml
index fe56863..21ed923 100644
--- a/res/xml/misc_derpspace.xml
+++ b/res/xml/misc_derpspace.xml
@@ -81,4 +81,31 @@
 
     </PreferenceCategory>
 
+    <PreferenceCategory
+        android:key="statusbar_padding"
+        android:title="@string/statusbar_padding">
+
+        <org.derpfest.support.preferences.SystemSettingSeekBarPreference
+            android:key="statusbar_top_padding"
+            android:max="10"
+            android:title="@string/statusbar_top_padding"
+            settings:min="-2"
+            android:fragment="org.derpfest.derpspace.fragments.StatusBar"/>
+
+        <org.derpfest.support.preferences.SystemSettingSeekBarPreference
+            android:key="statusbar_left_padding"
+            android:title="@string/statusbar_left_padding"
+            android:max="100"
+            android:min="-10"
+            android:fragment="org.derpfest.derpspace.fragments.StatusBar"/>
+
+        <org.derpfest.support.preferences.SystemSettingSeekBarPreference
+            android:key="statusbar_right_padding"
+            android:title="@string/statusbar_right_padding"
+            android:max="100"
+            android:min="-10"
+            android:fragment="org.derpfest.derpspace.fragments.StatusBar"/>
+
+    </PreferenceCategory>
+
 </PreferenceScreen>
diff --git a/src/org/derpfest/derpspace/fragments/StatusBar.java b/src/org/derpfest/derpspace/fragments/StatusBar.java
new file mode 100644
index 0000000..99e9f6d
--- /dev/null
+++ b/src/org/derpfest/derpspace/fragments/StatusBar.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2022 SuperiorOS
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.derpfest.derpspace.fragments;
+
+import com.android.internal.logging.nano.MetricsProto;
+
+import android.os.Bundle;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.UserHandle;
+import android.content.ContentResolver;
+import android.content.res.Resources;
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceGroup;
+import androidx.preference.PreferenceScreen;
+import androidx.preference.PreferenceCategory;
+import androidx.preference.Preference.OnPreferenceChangeListener;
+import androidx.preference.PreferenceFragment;
+import androidx.preference.SwitchPreference;
+import android.provider.Settings;
+import com.android.settings.R;
+
+import java.util.Locale;
+import android.text.TextUtils;
+
+import com.android.settings.SettingsPreferenceFragment;
+import com.android.settings.Utils;
+import android.util.Log;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+
+import org.derpfest.derpspace.utils.ResourceUtils;
+import org.derpfest.derpspace.preferences.CustomSeekBarPreference;
+
+public class StatusBar extends SettingsPreferenceFragment implements
+        OnPreferenceChangeListener {
+
+    private static final String KEY_STATUSBAR_TOP_PADDING = "statusbar_top_padding";
+    private static final String KEY_STATUSBAR_LEFT_PADDING = "statusbar_left_padding";
+    private static final String KEY_STATUSBAR_RIGHT_PADDING = "statusbar_right_padding";
+
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+
+        addPreferencesFromResource(R.xml.misc_derpspace);
+
+        PreferenceScreen prefSet = getPreferenceScreen();
+        ContentResolver resolver = getActivity().getContentResolver();
+        Context mContext = getActivity().getApplicationContext();
+        final Resources res = getResources();
+
+        final int defaultLeftPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_start);
+        CustomSeekBarPreference seekBar = findPreference(KEY_STATUSBAR_LEFT_PADDING);
+        seekBar.setDefaultValue(defaultLeftPadding, true);
+
+        final int defaultRightPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_end);
+        seekBar = findPreference(KEY_STATUSBAR_RIGHT_PADDING);
+        seekBar.setDefaultValue(defaultRightPadding, true);
+
+        final int defaultTopPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_top);
+        seekBar = findPreference(KEY_STATUSBAR_TOP_PADDING);
+        seekBar.setDefaultValue(defaultTopPadding, true);
+
+    }
+
+    public static void reset(Context mContext) {
+        ContentResolver resolver = mContext.getContentResolver();
+        final Resources res = mContext.getResources();
+
+        final int defaultLeftPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_start);
+        final int defaultRightPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_end);
+        final int defaultTopPadding = ResourceUtils.getIntDimensionDp(res,
+                com.android.internal.R.dimen.status_bar_padding_top);
+
+        Settings.System.putIntForUser(resolver,
+                Settings.System.STATUSBAR_LEFT_PADDING, defaultLeftPadding, UserHandle.USER_CURRENT);
+        Settings.System.putIntForUser(resolver,
+                Settings.System.STATUSBAR_RIGHT_PADDING, defaultRightPadding, UserHandle.USER_CURRENT);
+        Settings.System.putIntForUser(resolver,
+                Settings.System.STATUSBAR_TOP_PADDING, defaultTopPadding, UserHandle.USER_CURRENT);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+
+        return false;
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsProto.MetricsEvent.DERP;
+    }
+
+}
diff --git a/src/org/derpfest/derpspace/preferences/CustomSeekBarPreference.java b/src/org/derpfest/derpspace/preferences/CustomSeekBarPreference.java
new file mode 100644
index 0000000..b92f269
--- /dev/null
+++ b/src/org/derpfest/derpspace/preferences/CustomSeekBarPreference.java
@@ -0,0 +1,344 @@
+/*
+ * Copyright (C) 2016-2019 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package org.derpfest.derpspace.preferences;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.PorterDuff;
+import androidx.preference.*;
+import androidx.core.content.res.TypedArrayUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewParent;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.android.settings.R;
+
+public class CustomSeekBarPreference extends Preference implements SeekBar.OnSeekBarChangeListener,
+        View.OnClickListener, View.OnLongClickListener {
+    protected final String TAG = getClass().getName();
+    private static final String SETTINGS_NS = "http://schemas.android.com/apk/res/com.android.settings";
+    protected static final String ANDROIDNS = "http://schemas.android.com/apk/res/android";
+
+    protected int mInterval = 1;
+    protected boolean mShowSign = false;
+    protected String mUnits = "";
+    protected boolean mContinuousUpdates = false;
+
+    protected int mMinValue = 0;
+    protected int mMaxValue = 100;
+    protected boolean mDefaultValueExists = false;
+    protected int mDefaultValue;
+
+    protected int mValue;
+
+    protected TextView mValueTextView;
+    protected ImageView mResetImageView;
+    protected ImageView mMinusImageView;
+    protected ImageView mPlusImageView;
+    protected SeekBar mSeekBar;
+
+    protected boolean mTrackingTouch = false;
+    protected int mTrackingValue;
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+
+        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CustomSeekBarPreference);
+        try {
+            mShowSign = a.getBoolean(R.styleable.CustomSeekBarPreference_showSign, mShowSign);
+            String units = a.getString(R.styleable.CustomSeekBarPreference_units);
+            if (units != null)
+                mUnits = " " + units;
+            mContinuousUpdates = a.getBoolean(R.styleable.CustomSeekBarPreference_continuousUpdates, mContinuousUpdates);
+        } finally {
+            a.recycle();
+        }
+
+        try {
+            String newInterval = attrs.getAttributeValue(SETTINGS_NS, "interval");
+            if (newInterval != null)
+                mInterval = Integer.parseInt(newInterval);
+        } catch (Exception e) {
+            Log.e(TAG, "Invalid interval value", e);
+        }
+        mMinValue = attrs.getAttributeIntValue(SETTINGS_NS, "min", mMinValue);
+        mMaxValue = attrs.getAttributeIntValue(ANDROIDNS, "max", mMaxValue);
+        if (mMaxValue < mMinValue)
+            mMaxValue = mMinValue;
+        String defaultValue = attrs.getAttributeValue(ANDROIDNS, "defaultValue");
+        mDefaultValueExists = defaultValue != null && !defaultValue.isEmpty();
+        if (mDefaultValueExists) {
+            mDefaultValue = getLimitedValue(Integer.parseInt(defaultValue));
+            mValue = mDefaultValue;
+        } else {
+            mValue = mMinValue;
+        }
+
+        mSeekBar = new SeekBar(context, attrs);
+        setLayoutResource(R.layout.preference_custom_seekbar);
+    }
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr) {
+        this(context, attrs, defStyleAttr, 0);
+    }
+
+    public CustomSeekBarPreference(Context context, AttributeSet attrs) {
+        this(context, attrs, TypedArrayUtils.getAttr(context,
+                androidx.preference.R.attr.preferenceStyle,
+                android.R.attr.preferenceStyle));
+    }
+
+    public CustomSeekBarPreference(Context context) {
+        this(context, null);
+    }
+
+    @Override
+    public void onBindViewHolder(PreferenceViewHolder holder) {
+        super.onBindViewHolder(holder);
+        try
+        {
+            // move our seekbar to the new view we've been given
+            ViewParent oldContainer = mSeekBar.getParent();
+            ViewGroup newContainer = (ViewGroup) holder.findViewById(R.id.seekbar);
+            if (oldContainer != newContainer) {
+                // remove the seekbar from the old view
+                if (oldContainer != null) {
+                    ((ViewGroup) oldContainer).removeView(mSeekBar);
+                }
+                // remove the existing seekbar (there may not be one) and add ours
+                newContainer.removeAllViews();
+                newContainer.addView(mSeekBar, ViewGroup.LayoutParams.FILL_PARENT,
+                        ViewGroup.LayoutParams.WRAP_CONTENT);
+            }
+        } catch (Exception ex) {
+            Log.e(TAG, "Error binding view: " + ex.toString());
+        }
+
+        mSeekBar.setMax(getSeekValue(mMaxValue));
+        mSeekBar.setProgress(getSeekValue(mValue));
+        mSeekBar.setEnabled(isEnabled());
+
+        mValueTextView = (TextView) holder.findViewById(R.id.value);
+        mResetImageView = (ImageView) holder.findViewById(R.id.reset);
+        mMinusImageView = (ImageView) holder.findViewById(R.id.minus);
+        mPlusImageView = (ImageView) holder.findViewById(R.id.plus);
+
+        updateValueViews();
+
+        mSeekBar.setOnSeekBarChangeListener(this);
+        mResetImageView.setOnClickListener(this);
+        mMinusImageView.setOnClickListener(this);
+        mPlusImageView.setOnClickListener(this);
+        mResetImageView.setOnLongClickListener(this);
+        mMinusImageView.setOnLongClickListener(this);
+        mPlusImageView.setOnLongClickListener(this);
+    }
+
+    protected int getLimitedValue(int v) {
+        return v < mMinValue ? mMinValue : (v > mMaxValue ? mMaxValue : v);
+    }
+
+    protected int getSeekValue(int v) {
+        return 0 - Math.floorDiv(mMinValue - v, mInterval);
+    }
+
+    protected String getTextValue(int v) {
+        return (mShowSign && v > 0 ? "+" : "") + String.valueOf(v) + mUnits;
+    }
+
+    protected void updateValueViews() {
+        if (mValueTextView != null) {
+            mValueTextView.setText(getContext().getString(R.string.custom_seekbar_value,
+                (!mTrackingTouch || mContinuousUpdates ? getTextValue(mValue) +
+                (mDefaultValueExists && mValue == mDefaultValue ? " (" +
+                getContext().getString(R.string.custom_seekbar_default_value) + ")" : "")
+                    : getTextValue(mTrackingValue))));
+        }
+        if (mResetImageView != null) {
+            if (!mDefaultValueExists || mValue == mDefaultValue || mTrackingTouch)
+                mResetImageView.setVisibility(View.INVISIBLE);
+            else
+                mResetImageView.setVisibility(View.VISIBLE);
+        }
+        if (mMinusImageView != null) {
+            if (mValue == mMinValue || mTrackingTouch) {
+                mMinusImageView.setClickable(false);
+                mMinusImageView.setColorFilter(getContext().getColor(R.color.disabled_text_color),
+                    PorterDuff.Mode.MULTIPLY);
+            } else {
+                mMinusImageView.setClickable(true);
+                mMinusImageView.clearColorFilter();
+            }
+        }
+        if (mPlusImageView != null) {
+            if (mValue == mMaxValue || mTrackingTouch) {
+                mPlusImageView.setClickable(false);
+                mPlusImageView.setColorFilter(getContext().getColor(R.color.disabled_text_color), PorterDuff.Mode.MULTIPLY);
+            } else {
+                mPlusImageView.setClickable(true);
+                mPlusImageView.clearColorFilter();
+            }
+        }
+    }
+
+    protected void changeValue(int newValue) {
+        // for subclasses
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+        int newValue = getLimitedValue(mMinValue + (progress * mInterval));
+        if (mTrackingTouch && !mContinuousUpdates) {
+            mTrackingValue = newValue;
+            updateValueViews();
+        } else if (mValue != newValue) {
+            // change rejected, revert to the previous value
+            if (!callChangeListener(newValue)) {
+                mSeekBar.setProgress(getSeekValue(mValue));
+                return;
+            }
+            // change accepted, store it
+            changeValue(newValue);
+            persistInt(newValue);
+
+            mValue = newValue;
+            updateValueViews();
+        }
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+        mTrackingValue = mValue;
+        mTrackingTouch = true;
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        mTrackingTouch = false;
+        if (!mContinuousUpdates)
+            onProgressChanged(mSeekBar, getSeekValue(mTrackingValue), false);
+        notifyChanged();
+    }
+
+    @Override
+    public void onClick(View v) {
+        int id = v.getId();
+        if (id == R.id.reset) {
+            Toast.makeText(getContext(), getContext().getString(R.string.custom_seekbar_default_value_to_set, getTextValue(mDefaultValue)),
+                    Toast.LENGTH_LONG).show();
+        } else if (id == R.id.minus) {
+            setValue(mValue - mInterval, true);
+        } else if (id == R.id.plus) {
+            setValue(mValue + mInterval, true);
+        }
+    }
+
+    @Override
+    public boolean onLongClick(View v) {
+        int id = v.getId();
+        if (id == R.id.reset) {
+            setValue(mDefaultValue, true);
+            //Toast.makeText(getContext(), getContext().getString(R.string.custom_seekbar_default_value_is_set),
+            //        Toast.LENGTH_LONG).show();
+        } else if (id == R.id.minus) {
+            setValue(mMaxValue - mMinValue > mInterval * 2 && mMaxValue + mMinValue < mValue * 2 ? Math.floorDiv(mMaxValue + mMinValue, 2) : mMinValue, true);
+        } else if (id == R.id.plus) {
+                setValue(mMaxValue - mMinValue > mInterval * 2 && mMaxValue + mMinValue > mValue * 2 ? -1 * Math.floorDiv(-1 * (mMaxValue + mMinValue), 2) : mMaxValue, true);
+        }
+        return true;
+    }
+
+    // dont need too much shit about initial and default values
+    // its all done in constructor already
+
+    @Override
+    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
+        if (restoreValue)
+            mValue = getPersistedInt(mValue);
+    }
+
+    @Override
+    public void setDefaultValue(Object defaultValue) {
+        if (defaultValue instanceof Integer)
+            setDefaultValue((Integer) defaultValue, mSeekBar != null);
+        else
+            setDefaultValue(defaultValue == null ? (String) null : defaultValue.toString(), mSeekBar != null);
+    }
+
+    public void setDefaultValue(int newValue, boolean update) {
+        newValue = getLimitedValue(newValue);
+        if (!mDefaultValueExists || mDefaultValue != newValue) {
+            mDefaultValueExists = true;
+            mDefaultValue = newValue;
+            if (update)
+                updateValueViews();
+        }
+    }
+
+    public void setDefaultValue(String newValue, boolean update) {
+        if (mDefaultValueExists && (newValue == null || newValue.isEmpty())) {
+            mDefaultValueExists = false;
+            if (update)
+                updateValueViews();
+        } else if (newValue != null && !newValue.isEmpty()) {
+            setDefaultValue(Integer.parseInt(newValue), update);
+        }
+    }
+
+    public void setMax(int max) {
+        mMaxValue = max;
+        mSeekBar.setMax(mMaxValue - mMinValue);
+    }
+
+    public void setMin(int min) {
+        mMinValue = min;
+        mSeekBar.setMax(mMaxValue - mMinValue);
+    }
+
+    public void setValue(int newValue) {
+        mValue = getLimitedValue(newValue);
+        if (mSeekBar != null) mSeekBar.setProgress(getSeekValue(mValue));
+    }
+
+    public void setValue(int newValue, boolean update) {
+        newValue = getLimitedValue(newValue);
+        if (mValue != newValue) {
+            if (update)
+                mSeekBar.setProgress(getSeekValue(newValue));
+            else
+                mValue = newValue;
+        }
+    }
+
+    public int getValue() {
+        return mValue;
+    }
+
+    // need some methods here to set/get other attrs at runtime,
+    // but who really need this ...
+
+    public void refresh(int newValue) {
+        // this will ...
+        setValue(newValue, mSeekBar != null);
+    }
+}
diff --git a/src/org/derpfest/derpspace/utils/ResourceUtils.java b/src/org/derpfest/derpspace/utils/ResourceUtils.java
new file mode 100644
index 0000000..6474c1f
--- /dev/null
+++ b/src/org/derpfest/derpspace/utils/ResourceUtils.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2023 AlphaDroid
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.derpfest.derpspace.utils;
+
+import android.content.res.Resources;
+import android.util.TypedValue;
+
+import androidx.annotation.DimenRes;
+
+
+public class ResourceUtils {
+    public static Float getFloatDimensionDp(Resources resources, @DimenRes int dimenResId) {
+        TypedValue value = new TypedValue();
+        resources.getValue(dimenResId, value, true);
+        return TypedValue.complexToFloat(value.data);
+    }
+
+    public static int getIntDimensionDp(Resources resources, @DimenRes int dimenResId) {
+        return getFloatDimensionDp(resources, dimenResId).intValue();
+    }
+}
-- 
2.34.1

